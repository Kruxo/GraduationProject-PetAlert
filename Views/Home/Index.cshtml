@model FoundLostIndexVm


@{
    ViewData["Title"] = "Home Page";
}

<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />


<style>
    /* Ensure image covers the entire width */
    .leaflet-popup-content img {
        width: 100% !important;
        height: auto;
        display: block;
        object-fit: cover;
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
    }

    /* Remove the popup tip */
    .leaflet-popup-tip {
        display: none !important;
    }
</style>

<body>
    <header class="container-fluid headerclass p-5">
        <h1 class="brown-text"><strong>Help Find Lost Pets</strong></h1>
        <p class="dark-brown-text">Together we can reunite pets with their families. View the map or sign up to report a
            lost or found pet.
        </p>
        <button class="button ">♡ Help Reunite Pets</button>
        <button class="button ">⌕ Browse Reports</button>

    </header>


    <div class="container-fluid p-4">


        @* map *@
        <div id="map-container" style=" display: flex; justify-content: center;">
            <div id="map" style="
                height: 70vh; /* Height is responsive to viewport */
                width: 90%;
                border-radius: 15px;
                box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
                border: 2px solid #ccc;
                margin-bottom: 20px;
                overflow: hidden;"></div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const map = L.map('map').setView([59.3293, 18.0686], 10);

            // Add OpenStreetMap tiles
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors',
            }).addTo(map);

            // Define a custom icon
            const customIcon = L.icon({
                iconUrl: 'https://static-00.iconduck.com/assets.00/fish-icon-1982x2048-xxayvvtg.png', // Path to your custom icon
                iconSize: [32, 32], // Size of the icon
                iconAnchor: [16, 32], // Anchor point of the icon (center bottom)
                popupAnchor: [0, -32] // Point where the popup opens relative to the icon
            });

            // Markers from the server
            const markers = @Html.Raw(Json.Serialize(ViewBag.Markers));

            markers.forEach(marker => {
                fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${marker.latitude}&lon=${marker.longitude}`)
                    .then(response => response.json())
                    .then(data => {
                        let address = data.address || {}; // Get structured address data

                        // Extract only required fields in the specified order
                        let road = address.road || "";
                        let houseNumber = address.house_number || "";
                        let postcode = address.postcode || "";
                        let city = address.city || address.town || address.village || "";

                        // Format the address in the required order
                        let formattedAddress = `${road} ${houseNumber}, ${postcode}, ${city}`;

                        // If road is missing, remove extra spaces and commas
                        formattedAddress = formattedAddress.replace(/,\s*,/g, ",").trim();
                        formattedAddress = formattedAddress.replace(/^,|,$/g, ""); // Remove leading/trailing commas

                        console.log(formattedAddress); // Debugging

        // Display formatted address in popup
        L.marker([marker.latitude, marker.longitude], { icon: customIcon })
            .addTo(map)
            .bindPopup(`
                
                    <img src="${marker.image}" alt="${marker.name}"
                        style="height: 160px; width: 100%; object-fit: cover; ">
                    <div class=" p-2">
                        <!-- Display the formatted address -->
                        <div class="d-flex align-items-center text-muted small mb-2">
                            <i class="fas fa-map-marker-alt me-1"></i> ${formattedAddress}
                        </div>
                        <h5 class="fw-bold text-dark">${marker.name}</h5>
                        <!-- Pet Type Badge -->
                        <div class="d-flex align-items-center">
                            <span class="badge bg-warning text-dark">
                                <i class="fas fa-paw"></i> ${marker.petType}
                            </span>
                        </div>
                        <p class="text-muted mb-2">${marker.description}</p>


                    </div>
               
            `, { minWidth: 300, maxWidth: 320 });
                    })
                    .catch(error => console.error("Error fetching address:", error));

            });
        });
    </script>
    </div>

    <div class="container-fluid reportlist p-4" style="display: flex; justify-content: center;">
        <div style="display: flex; justify-content: center; width:90%; max-width: 1200px;">

        <div class="card col-6 me-1 ms-1" >
            <table class="table">
                
                <thead>
                    <tr>
                        <th style="font-size: xx-large;">Lost pets</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                
                  
                      @foreach (var lostPet in Model.LostPets){
                    <tr>
                        <th><img src="@lostPet.Image" class="image-fit" alt="@lostPet.Image"></th>
                        <td>@lostPet.Description</td>
                    </tr>
                    }
                    
                </tbody>

                </table>
            </div>

            <div class="col-6 ms-1 me-1">
                <div class="">
                    <ul class="list-unstyled">


                        <p style="font-size: xx-large;">Found pets </p>
                        @foreach (var foundPet in Model.FoundPets.OrderByDescending(p => p.Id).Take(3))
                        {
                            <div class="card mb-1">
                                <li class="row align-items-start">
                                    <div class="col-auto">
                                        <img src="@foundPet.Image" class="image-fit rounded-left " alt="@foundPet.Image">
                                    </div>
                                    <div class="col">
                                        <h5 class="card-title mt-3"><strong>@foundPet.Name</strong></h5>
                                        <p class="card-text">@foundPet.Description</p>
                                    </div>
                                </li>
                            </div>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</body>