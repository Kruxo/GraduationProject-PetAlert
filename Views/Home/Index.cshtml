@model FoundLostIndexVm

@{
    ViewData["Title"] = "PetAlert!";
}

<style>
    /* Ensure image covers the entire width */
    .leaflet-popup-content img {
        width: 100% !important;
        height: auto;
        display: block;
        object-fit: cover;
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
    }

    /* Remove the popup tip */
    .leaflet-popup-tip {
        display: none !important;
    }

    .leaflet-popup-content {
        margin: 0;
        width: 300px;
    }

    .leaflet-popup-close-button span {
        font-weight: bold;
        color: white;
        -webkit-text-stroke: 1px black;
        display: flex;
        justify-content: center;
        text-align: center;
        padding-bottom: 2px;
    }

    .animate-missing {
        font-size: 3.5rem;
        display: inline-block;
        color: hsl(44, 100%, 50%);
        position: relative;
        animation: floatUp 5s ease-in-out infinite;

        text-shadow:
            -1px -1px 0 #9c7f5d,
            1px -1px 0 #9c7f5d,
            -1px 1px 0 #9c7f5d,
            1px 1px 0 #9c7f5d;

    }


    @@keyframes floatUp {

        0%,
        100% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-10px);
        }
    }
</style>

<body>
    <header class="container-fluid headerclass p-5">
        <h1 class="brown-text" style="font-size: 50px; "><strong>Help Find <span class="animate-missing">Missing</span>
                Pets</strong></h1>
        <p class="dark-brown-text">Together we can reunite pets with their families. View the map or <br>sign up to
            report a
            lost or found pet.
        </p>
        <button class="button" style="padding: 10px 0; margin-top: 10px;"><a style="color: white !important;"
                class="nav-link" asp-controller="Reports" asp-action="CreateReports">
                ♡ Help Reunite Pets</a></button>
        <button class="button" style="padding: 10px 0; margin-top: 10px; "><a style="color: white !important;"
                class="nav-link" asp-controller="Reports" asp-action="Index">
                ⌕ Browse Reports</a></button>
    </header>


    <div class="container-fluid p-4">
        <div id="map-container" style=" display: flex; justify-content: center;">
            <div id="map" style="
                height: 60vh; /* Height is responsive to viewport */
                width: 80%;
                border-radius: 15px;
                box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
                border: 2px solid #ccc;
                margin-bottom: 20px;
                overflow: hidden;"></div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const map = L.map('map').setView([59.3293, 18.0686], 10);

            // Add OpenStreetMap tiles
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors',
            }).addTo(map);

            // Define a custom icon
            const customIcon = L.icon({
                iconUrl: 'https://cdn2.iconfinder.com/data/icons/animals-92/28/animal_lineal_color-09-512.png', // Path to your custom icon
                iconSize: [32, 32], // Size of the icon
                iconAnchor: [16, 32], // Anchor point of the icon (center bottom)
                popupAnchor: [0, -32] // Point where the popup opens relative to the icon
            });

            // Markers from the server
            const markers = @Html.Raw(Json.Serialize(ViewBag.Markers));

            markers.forEach(marker => {
                fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${marker.latitude}&lon=${marker.longitude}`)
                    .then(response => response.json())
                    .then(data => {
                        let address = data.address || {}; // Get structured address data

                        // Extract only required fields in the specified order
                        let road = address.road || "";
                        let houseNumber = address.house_number || "";
                        let postcode = address.postcode || "";
                        let city = address.city || address.town || address.village || "";

                        // Format the address in the required order
                        let formattedAddress = `${road} ${houseNumber}, ${postcode}, ${city}`;

                        // If road is missing, remove extra spaces and commas
                        formattedAddress = formattedAddress.replace(/,\s*,/g, ",").trim();
                        formattedAddress = formattedAddress.replace(/^,|,$/g, ""); // Remove leading/trailing commas

                        console.log(formattedAddress); // Debugging

                        // Display formatted address in popup
                        L.marker([marker.latitude, marker.longitude], { icon: customIcon })
                            .addTo(map)
                            .bindPopup(`

                    <img src="${marker.image}" alt="${marker.name}"
                        style="height: 160px; width: 100%; object-fit: cover; ">
                    <div class=" p-2">
                        <!-- Display the formatted address -->
                        <div class="d-flex align-items-center text-muted small mb-2">
                            <i class="fas fa-map-marker-alt me-1"></i> ${formattedAddress}
                        </div>
                        <h5 class="fw-bold text-dark">${marker.name}</h5>
                        <!-- Pet Type Badge -->
                        <div class="d-flex align-items-center">
                            <span class="badge bg-warning text-dark">
                                <i class="fas fa-paw"></i> ${marker.petType}
                            </span>
                        </div>
                        <p class="text-muted mb-2"><b>Description: </b>${marker.description}</p>    
                        <p class="text-muted mb-2"><b>Phone Number: </b>${marker.phoneNumber}</p>
                        <p class="text-muted mb-2"> ${marker.chipId ? '<b>Chip ID: </b>' + marker.chipId : ""}</p >
                    </div >

            `, { minWidth: 300, maxWidth: 320 });
                    })
                    .catch(error => console.error("Error fetching address:", error));

            });
        });
    </script>
    </div>
</body>