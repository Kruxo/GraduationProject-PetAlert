@model FoundLostIndexVm

@{
    ViewData["Title"] = "List of Missing Pets";
}

@{
    //Combines lost and found reports into a single list and sort by date
    var allPets = Model.LostPets
    .Select(p => new
    {
        p.Id,
        p.Name,
        p.Description,
        p.Image,
        p.Date,
        ReportType = "Lost",
        PetType = Model.PetTypes.FirstOrDefault(pt => pt.Id == p.PetTypeId)?.Type ?? "Unknown",
        PhoneNumber = Model.Users.FirstOrDefault(pn => pn.Id == p.UserId)?.PhoneNumber ?? "Not available"

    }) @*Select linq method transforms each item in LostPets list into an object, and also include a new item called ReportType *@
.Concat(Model.FoundPets.Select(p => new
{
    p.Id,
    p.Name,
    p.Description,
    p.Image,
    p.Date,
    ReportType = "Found",
    PetType = Model.PetTypes.FirstOrDefault(pt => pt.Id == p.PetTypeId)?.Type ?? "Unknown",
    PhoneNumber = Model.Users.FirstOrDefault(pn => pn.Id == p.UserId)?.PhoneNumber ?? "Not available"
})) @*Does the same as above but combines with concat into a single sequence*@
.OrderByDescending(p => p.Date) @*Sorts by date*@
.ToList(); @*Converts the sequence to a list*@
}

<div class="container-fluid reportlist p-4" style="display: flex; justify-content: center;">
    <div style="display: flex; justify-content: center; width:90%; max-width: 1200px;">
        <div class="col-12">
            <ul class="list-unstyled">
                <p style="font-size: xx-large;">Reported Pets</p>
                @foreach (var pet in allPets)
                {
                    <div class="card mb-1">
                        <li class="row align-items-start">
                            <div class="col-auto">
                                <img src="@pet.Image" class="image-fit rounded-left" alt="@pet.Image">
                            </div>
                            <div class="col">
                                <h5 class="card-title mt-3"><strong>@pet.Name</strong></h5>
                                <p class="card-text">@pet.Description</p>
                                <p class="card-text"><em>Report Category: @pet.ReportType</em></p>
                                <p class="card-text"><em>Pet Type: @pet.PetType</em></p>
                                <p class="card-text"><em>Phone Number: @pet.PhoneNumber</em></p>
                                <!-- Indicate Lost or Found -->
                                <p class="card-text"><small class="text-muted">Reported on:
                                        @pet.Date.ToString("dd-MM-yyyy")</small></p>
                                <!-- "dd-MMMM-yyyy" om man vill månaden skriven ut i bokstäver -->
                            </div>
                        </li>
                    </div>
                }
            </ul>
        </div>
    </div>
</div>


@* 

@{
    // Till Kit yee och Niklas, om ni inte vill använda linq

    var allPets = new List<dynamic>(); //Tom lista av typen dynamic, som kan ta emot objekt

    foreach (var lostPet in Model.LostPets) // Itererar genom LostPets och lägger till i den gemensamma listan
    {
        allPets.Add(new 
        { 
            Id = lostPet.Id, 
            Name = lostPet.Name, 
            Description = lostPet.Description, 
            Image = lostPet.Image, 
            Date = lostPet.Date, 
            ReportType = "Lost" 
        });
    }

    foreach (var foundPet in Model.FoundPets) // Itererar genom FoundPets och lägger till i den gemensamma listan
    {
        allPets.Add(new 
        { 
            Id = foundPet.Id, 
            Name = foundPet.Name, 
            Description = foundPet.Description, 
            Image = foundPet.Image, 
            Date = foundPet.Date, 
            ReportType = "Found" 
        });
    }

    allPets = allPets.OrderByDescending(p => p.Date).ToList(); 
} 

*@