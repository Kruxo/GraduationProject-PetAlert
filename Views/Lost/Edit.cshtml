@using Microsoft.AspNetCore.Identity
@model LostEditVm
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject UserService UserService
@{
    var isAdmin = await UserService.IsCurrentUserAdministratorAsync();
}

@{
    ViewData["Title"] = "Edit report";
}

<style>
    body {
        background-color: #fff9f4;
    }

    h1 {
        font-size: 2rem;
        font-weight: bold;
        text-align: center;
    }

    .card {
        max-width: 600px;
        margin: 40px auto;
        padding: 20px;
        background-color: #ffffff;
        border-radius: 16px;
        border: 1px solid #e6ccb4;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    @@media (max-width: 768px) {
        .card {
            max-width: 300px;
        }
    }

    .form-group label {
        font-weight: bold;
        color: hsl(30, 10%, 45%);
    }

    .form-control {
        padding: 12px;
        border: 1px solid #e6ccb4;
        border-radius: 8px;
        background-color: #fff9f4;
        transition: box-shadow 0.3s ease, border-color 0.3s ease;
    }

    .form-control:focus {
        border-color: hsl(28, 54%, 44%);
        box-shadow: 0 0 6px rgba(162, 107, 61, 0.5);
    }

    .btn-primary {
        border: none;
        color: white;
        padding: 12px;
        border-radius: 8px;
        transition: background-color 0.3s ease, transform 0.2s ease;
        font-weight: bold;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
    }

    .pet-image {
        border-radius: 8px;
        width: 200px;
        height: 200px;
        object-fit: cover;
        background-color: #f0e4d7;
    }
</style>

@if (SignInManager.IsSignedIn(User))
{
    var currentUserId = UserManager.GetUserId(User); //Getting current userId
    if (Model.LostPet.UserId == currentUserId || isAdmin) //Checking if current userId matches with the owner
    {

        <div class="card">
            <h1 class="form-title">Edit Lost Pet Entry</h1>
            <!-- Picture Section -->
            <div class="d-flex flex-column align-items-center">
                <img class="pet-image" src="@Model.LostPet.Image" alt="Found Pet">
            </div>

            <!-- Form Section -->
            <div style="flex: 1;">
                <form asp-action="Edit" method="post">
                    <input type="hidden" asp-for="LostPet.Id" />

                    <div class="form-group mb-3">
                        <label asp-for="LostPet.Name">Name</label>
                        <input asp-for="LostPet.Name" class="form-control" />
                        <span asp-validation-for="LostPet.Name" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="LostPet.Description">Description</label>
                        <textarea asp-for="LostPet.Description" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="LostPet.Description" class="text-danger"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="LostPet.ChipId">Chip ID</label>
                        <input asp-for="LostPet.ChipId" class="form-control" />
                        <span asp-validation-for="LostPet.ChipId" class="text-danger"></span>
                    </div>

                    <div class="form-group position-relative mb-3">
                        <label class="form-label">Search Location</label>
                        <input type="text" id="searchBox" class="form-control" placeholder="Type an address..."
                            autocomplete="off">

                        <!-- Dropdown list container -->
                        <div class="dropdown-menu w-100 shadow-sm mt-1" id="autocomplete-list"></div>
                    </div>

                    <div class="form-group mb-3">
                        <label class="form-label">Or select location on the map</label>
                        <div id="map" style="height: 400px; width: 100%; border: 1px solid #ccc; border-radius: 10px;"></div>
                    </div>

                    <div class="mb-3" style="display: flex; flex-direction: column;">
                        <!-- Hidden input fields for Latitude and Longitude -->
                        <input type="hidden" asp-for="LostPet.Latitude" id="Latitude" />
                        <input type="hidden" asp-for="LostPet.Longitude" id="Longitude" />

                        <!-- Display Latitude/Longitude -->
                        <span id="latDisplay" style="font-size: 12px;">Latitude: <span id="latValue"></span></span>
                        <span id="lngDisplay" style="font-size: 12px;">Longitude: <span id="lngValue"></span></span>

                        <!-- Validation for Latitude/Longitude -->
                        <span asp-validation-for="LostPet.Latitude" class="text-danger" style="font-size: 12px;"></span>
                        <span asp-validation-for="LostPet.Longitude" class="text-danger" style="font-size: 12px;"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="LostPet.Image">Image URL</label>
                        <input asp-for="LostPet.Image" class="form-control" />
                        <span asp-validation-for="LostPet.Image" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="LostPet.PetTypeId">Pet Type</label>
                        <select asp-for="LostPet.PetTypeId" class="form-control">
                            <option value="">-- Select Pet Type --</option>
                            @foreach (var petType in Model.PetTypes)
                            {
                                <option value="@petType.Id">@petType.Type</option>
                            }
                        </select>
                        <span asp-validation-for="LostPet.PetTypeId" class="text-danger"></span>
                    </div>

                    <div class="form-group mt-4">
                        <button type="submit" class="btn btn-primary w-100">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>

    }
    else
    {
        <div class="container text-center">
            <div class="alert large fw-bold">
                You do not have access to this page.
            </div>
        </div>
    }

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize the map centered on Stockholm
            const map = L.map('map').setView([59.3293, 18.0686], 10);

            // Add OpenStreetMap tiles
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Â© OpenStreetMap contributors',
            }).addTo(map);

            let marker = null; // Store marker reference
            // Function to update latitude and longitude fields and spans
            function updateLatLng(lat, lng) {
                document.getElementById('Latitude').value = lat;
                document.getElementById('Longitude').value = lng;

                // Update the span elements
                document.getElementById('latDisplay').textContent = `Latitude: ${lat}`;
                document.getElementById('lngDisplay').textContent = `Longitude: ${lng}`;
            }

            // Function to place a marker
            function placeMarker(lat, lng) {
                if (marker) {
                    map.removeLayer(marker); // Remove previous marker
                }
                marker = L.marker([lat, lng], { draggable: true }).addTo(map);

                // Update lat/lng when marker is dragged
                marker.on('dragend', function () {
                    const newLatLng = marker.getLatLng();
                    updateLatLng(newLatLng.lat, newLatLng.lng);
                });

                // Update the input fields immediately
                updateLatLng(lat, lng);
            }

            // Click on the map to place marker
            map.on('click', function (e) {
                placeMarker(e.latlng.lat, e.latlng.lng);
            });

            // Search box functionality
            const searchBox = document.getElementById('searchBox');
            const dropdown = document.getElementById('autocomplete-list');

            searchBox.addEventListener('input', function () {
                const query = searchBox.value.trim();

                if (query.length < 3) {
                    dropdown.innerHTML = ""; // Clear suggestions if input is too short
                    dropdown.classList.remove("show"); // Hide dropdown
                    return;
                }

                fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&countrycodes=SE`)
                    .then(response => response.json())
                    .then(data => {
                        dropdown.innerHTML = ""; // Clear previous suggestions
                        if (data.length > 0) {
                            dropdown.classList.add("show"); // Show dropdown
                            data.slice(0, 5).forEach(place => {
                                const item = document.createElement('a');
                                item.className = "dropdown-item";
                                item.textContent = place.display_name;
                                item.href = "#"; // Prevent page reload

                                // Click to select an address
                                item.addEventListener('click', function (e) {
                                    e.preventDefault();
                                    searchBox.value = place.display_name;
                                    dropdown.innerHTML = ""; // Clear suggestions
                                    dropdown.classList.remove("show"); // Hide dropdown

                                    const lat = parseFloat(place.lat);
                                    const lng = parseFloat(place.lon);

                                    map.setView([lat, lng], 14);
                                    placeMarker(lat, lng);
                                });

                                dropdown.appendChild(item);
                            });
                        } else {
                            dropdown.classList.remove("show"); // Hide if no results
                        }
                    })
                    .catch(error => console.error("Error fetching location:", error));
            });

            // Hide dropdown when clicking outside
            document.addEventListener('click', function (event) {
                if (!searchBox.contains(event.target) && !dropdown.contains(event.target)) {
                    dropdown.innerHTML = "";
                    dropdown.classList.remove("show"); // Hide dropdown
                }
            });


        });
    </script>
}
